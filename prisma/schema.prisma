generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model CartItem {
  id        Int  @id @unique @default(autoincrement())
  productId String
  quantity  Int
  userId    String
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  productId String
  userId    String
  createdAt DateTime @default(now())
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          String     @id @unique @default(uuid())
  name        String
  description String
  price       Float
  imageUrl    String
  userId      String
  CartItem    CartItem[]
  Comment     Comment[]
  User        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Rating      Rating[]
  Review      Review[]

  @@index([userId])
}

model Rating {
  id        Int      @id @default(autoincrement())
  value     Int
  productId String
  userId    String
  createdAt DateTime @default(now())
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  productId String
  userId    String
  createdAt DateTime @default(now())
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @unique @default(uuid())
  name          String
  email         String     @unique
  image         String?
  password      String?    @default("")
  role          String     @default("user")
  key           String?    @default("")
  createdAt     DateTime   @default(now())
  emailVerified DateTime?
  ip            String?    @default("")
  Account       Account?
  CartItem      CartItem[]
  Comment       Comment[]
  Product       Product[]
  Rating        Rating[]
  Review        Review[]
  Session       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
